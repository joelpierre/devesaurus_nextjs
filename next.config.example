const path = require('path');
const flowRight = require('lodash/flowRight');
const withSass = require('@zeit/next-sass');
const withFonts = require('next-fonts');
const withTypescript = require("@zeit/next-typescript");
const webpack = require('webpack');
const ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');
const env = require('./config');
const aliases = require('./config/webpack/aliases');
const withBundleAnalyzer = require("@zeit/next-bundle-analyzer");
const FilterPlugin = require("./config/webpack/FilterPlugin");
const SassToTypescriptPlugin = require("./config/webpack/SassToTypescriptPlugin");

const {PHASE_PRODUCTION_SERVER} = require('next/constants');

const enhancer = flowRight(
  withTypescript,
  withFonts,
  withSass,
  withBundleAnalyzer,
);

const {
  NEWRELIC_LICENSE_KEY,
  ...publicRuntimeConfig
} = env;
module.exports = (phase) => {

  return enhancer({
    webpack(config, options) {
      config.plugins.push(
        new webpack.EnvironmentPlugin(env)
      );

      config.resolve.alias = Object.assign(config.resolve.alias, aliases);

      if (options.dev) {
        config.devtool = 'cheap-module-eval-source-map';
      }

      config.output.globalObject = `(typeof self !== 'undefined' ? self : this)`;

      // register the common module in webpack
      config.module.rules.push({
        test: /\.(ts|tsx)$/,
        include: [path.resolve(__dirname, 'src/common')],
        exclude: /node_modules/,
        use: {
          ...options.defaultLoaders.babel,
          options: {
            ...options.defaultLoaders.babel.options,
            cwd: __dirname

          }
        }
      });

      config.module.rules.push({
        test: /\.(js|data|mem|)$/,
        include: [
          path.resolve(__dirname, 'src/client/shared/thirdParty/MakeupAi/lib/holition')
        ],
        loader: 'file-loader',
        options: {
          outputPath: 'static',
          publicPath: '_next/static'
        }
      });

      config.module.rules.push({
        test: /\.(jpe?g|png|gif|ico|webp)$/,
        exclude: /node_modules/,
        use: [
          {
            loader: 'url-loader',
            options: {
              limit: 8192,
              fallback: 'file-loader',
              publicPath: '/_next/static/images/',
              outputPath: `${options.isServer ? "../" : ""}static/images/`,
              name: "[name]-[hash].[ext]"
            }
          }
        ]
      });

      config.module.rules.push({
        test: /\.svg$/,
        use: [
          {
            loader: 'url-loader',
            options: {
              limit: 8,
              fallback: 'file-loader',
              publicPath: '/_next/static/images/',
              outputPath: `${options.isServer ? "../" : ""}static/images/`,
              name: "[name]-[hash].[ext]"
            }
          },
          'svgo-loader'
        ]
      });

      config.plugins.push(
        new SassToTypescriptPlugin({
          phase: options.isServer ? 'server' : 'client',
          path: path.resolve('./config/webpack/SassToTypescriptPlugin/vars.scss')
        })
      );

      if (options.isServer) {

        // Do not run type checking twice:
        config.plugins.push(new ForkTsCheckerWebpackPlugin({
          watch: path.join(__dirname, 'src/client'),
          tsconfig: path.join(__dirname, 'tsconfig.json'),
          tslint: path.join(__dirname, 'tslint.json'),
        }));
      }

      if (!options.isServer && phase !== PHASE_PRODUCTION_SERVER) {
        const CopyWebpackPlugin = require('copy-webpack-plugin');
        config.plugins.push(new CopyWebpackPlugin([
          {
            from: path.resolve(__dirname, 'src/client/static/favicon'),
            to: 'static/favicon',
            toType: 'dir'
          }
        ]));
      }

      config.plugins.push(new webpack.DefinePlugin({
        'process.env': JSON.stringify(env)
      }));

      //https://github.com/webpack-contrib/mini-css-extract-plugin/issues/250
      config.plugins.push(
        new FilterPlugin({ filter: /chunk styles \[mini-css-extract-plugin]\nConflicting order between:/ }));

      return config
    },
    // expose config on server and client-side
    // https://github.com/zeit/next.js#exposing-configuration-to-the-server--client-side
    publicRuntimeConfig: {
      ...publicRuntimeConfig,
      NODE_ENV: process.env.NODE_ENV,
      RUN_ENV: process.env.RUN_ENV,
      APP_VERSION: process.env.APP_VERSION
    },
    exportPathMap: async function (defaultPathMap) {
      return {
        ...defaultPathMap,
        '/': {page: '/index'},
        '/product': {page: '/product', query: {store: 'uk', product: "", shade: ""}},
        '/products': {page: '/products', query: {store: 'uk', product: "", shade: ""}}
      }
    },
    distDir: '../../build/client/.next',
    assetPrefix: '',
    analyzeServer: ["server", "both"].includes(process.env.BUNDLE_ANALYZE),
    analyzeBrowser: ["browser", "both"].includes(process.env.BUNDLE_ANALYZE),
    bundleAnalyzerConfig: {
      server: {
        analyzerMode: 'static',
        reportFilename: './server.html'
      },
      browser: {
        analyzerMode: 'static',
        reportFilename: './client.html'
      }
    },
    poweredByHeader: false
  });
};
